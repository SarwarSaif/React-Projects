{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","class","alt","src","monster","id","name","email","CardList","className","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAIaA,G,YAAO,SAACC,GACjB,OACI,yBAAKC,MAAM,QACP,yBAAKA,MAAM,SACP,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,6BAI1B,yBAAKJ,MAAM,WACP,4BAAMD,EAAMI,QAAQE,KAAM,6BAAS,8BAAQN,EAAMI,QAAQG,YCP5DC,EAAW,SAACR,GACrB,OACQ,yBAAKS,UAAU,QACX,yBAAKA,UAAU,aACdT,EAAMU,SAASC,KAAI,SAAAP,GAAO,OACvB,kBAAC,EAAD,CAAME,KAAO,SAASM,IAAKR,EAAQC,GAAID,QAASA,UCPvDS,G,YAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,yBAAKN,UAAU,aACX,2BACIO,KAAK,SACLF,YAAcA,EACdG,SAAUF,IAChB,yBAAKN,UAAU,cC2DVS,E,YAzDb,aAAe,IAAD,8BAEZ,+CAsBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SArBrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IANH,E,iFAYO,IAAD,OAElBI,MAAM,8CAEHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAACV,SAAUmB,S,+BAWnC,IAAD,EAE0BC,KAAKN,MAA9Bd,EAFD,EAECA,SAAUW,EAFX,EAEWA,YAEZU,EAAmBrB,EAASsB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,yBAAKxB,UAAU,OACb,yCACA,kBAAC,EAAD,CACEK,YAAY,kBACZC,aAAce,KAAKf,eAGrB,kBAAC,EAAD,CACET,KAAK,OACLI,SAAYqB,S,GAlDJI,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.f67761bb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card.styles.scss'\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div class=\"card\">\r\n            <div class=\"imgBx\">\r\n                <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n                {/* URL parameter: \r\n                Must Remember. to write js code inside src you must use ( ` ) this sign not this ( ' ) */}\r\n            </div>\r\n            <div class=\"details\">\r\n                <h2>{ props.monster.name }<br></br><span>{ props.monster.email }</span></h2>\r\n            </div>\r\n\r\n        </div>\r\n        \r\n    );\r\n}","import React from 'react'\r\n\r\nimport './card-list.styles.scss'\r\n\r\nimport { Card } from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n    return(\r\n            <div className='body'>\r\n                <div className='card-list'> \r\n                {props.monsters.map(monster => (\r\n                    <Card name = 'Sarwar' key={monster.id} monster={monster}></Card>\r\n                ))}\r\n                  \r\n                    {/* Key is used to let the react know that\r\n                        it doesn't need to re-render everything. \r\n                    It can just change the associated element */}\r\n                </div>\r\n            </div>\r\n    );\r\n}","import React from 'react'\r\n\r\nimport './search-box.styles.scss'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return(\r\n        <div className=\"container\">\r\n            <input \r\n                type='search' \r\n                placeholder= {placeholder}\r\n                onChange={handleChange}/>\r\n          <div className=\"search\"></div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\n\nimport {CardList} from './components/card-list/card-list.component'\n\nimport './App.css';\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\nclass App extends React.Component {\n\n  // To access the states, \n  // We have to create constructor\n  constructor() {\n\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n  }\n\n\n  componentDidMount() {\n\n    fetch('https://jsonplaceholder.typicode.com/users') \n    /* Api request in the URL which returns a promise */\n      .then(response => response.json())\n      .then(users => this.setState( {monsters: users} ))\n\n  }\n\n\n  // Here Arrow function automatically bind \"this\" to the place\n  // where the arrow function is defined\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render() {\n\n    const { monsters, searchField} = this.state // Obeject Destructuring\n    \n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    // Convert it into lowercase and then search if the string includes anything like searchField\n    \n    return (\n      <div className=\"App\">\n        <h1>Monster's</h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        ></SearchBox>\n\n        <CardList \n          name='Saif' \n          monsters = {filteredMonsters}>\n        </CardList>\n\n      </div>\n    );\n\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}